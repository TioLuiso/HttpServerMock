{"name":"Httpservermock","tagline":"HTTP server mock is a library for testing which mocks HTTP requests.","body":"## **SOME EXAMPLES**\r\n***\r\n### Delete\r\n    using (var hserver = new HttpServerMock(TestServerPort))\r\n            {\r\n                hserver.SetUpExpectation(HttpMethod.DELETE, \"http://localhost:50000/user/23\")\r\n                    .ExpectedRequestHeader(\"test\", \"test1\")\r\n                    .Response(\r\n                        HttpStatusCode.OK,\r\n                        HttpRequestContentType.Json,\r\n                        new ResponseTestClass { Name = \"response\", IsOld = true, Age = 12 });\r\n\r\n                var restClient = new RestClient(this.serverBaseUrl);\r\n                var request = new RestRequest(\"/user/23\");\r\n                request.AddJsonBody(new { Name = \"test\", Id = 23 });\r\n                request.AddHeader(\"test\", \"test1\");\r\n                request.Method = Method.DELETE;\r\n\r\n                var response = restClient.Execute<ResponseTestClass>(request);\r\n                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, \"The respond status code is not the expected.\");\r\n                hserver.VerifyAllRequestExpectationsAndUnexpectedRequests();\r\n            }\r\n\r\n### Post\r\n    using (var hserver = new HttpServerMock(TestServerPort))\r\n            {\r\n                hserver.SetUpPostExpectation(\"http://localhost:50000/user/23\")\r\n                    .ExpectedNumberOfCalls(1)\r\n                    .ExpectedContent(new { Name = \"test\", Id = 23 }, HttpRequestContentType.Json)\r\n                    .ExpectedRequestHeader(\"test\", \"test1\")\r\n                    .Response(HttpStatusCode.OK, HttpRequestContentType.Json, new ResponseTestClass { Name = \"response\", IsOld = true, Age = 12 });\r\n\r\n                var restClient = new RestClient(this.serverBaseUrl);\r\n                var request = new RestRequest(\"/user/23\");\r\n                request.AddJsonBody(new { Name = \"test\", Id = 23 });\r\n                request.AddHeader(\"test\", \"test1\");\r\n                request.Method = Method.POST;\r\n\r\n                var response = restClient.Execute<ResponseTestClass>(request);\r\n                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, \"The respond status code is not the expected.\");\r\n                Assert.IsNotNull(response.Data, \"The response is empty.\");               \r\n                Assert.AreEqual(\"response\", response.Data.Name, \"The response data is not the expected.\");\r\n                Assert.IsTrue(response.Data.IsOld, \"The response data is not the expected.\");\r\n                Assert.AreEqual(12, response.Data.Age, \"The response data is not the expected.\");\r\n\r\n                hserver.VerifyAllRequestExpectationsAndUnexpectedRequests();\r\n            }\r\n\r\n### Setting up a default status code\r\n    using (var hserver = new HttpServerMock(TestServerPort))\r\n            {\r\n                hserver.ServerRequestsState.DefaultRespondStatusCode = HttpStatusCode.NotModified;\r\n\r\n                var restClient = new RestClient(this.serverBaseUrl);\r\n                var request = new RestRequest(\"/user/23\");\r\n                request.Method = Method.GET;\r\n\r\n                var response = restClient.Execute<ResponseTestClass>(request);\r\n                Assert.AreEqual(HttpStatusCode.NotModified, response.StatusCode, \"The respond status code is not the expected.\");\r\n            }\r\n\r\n### Using a request validator\r\n    using (var hserver = new HttpServerMock(TestServerPort))\r\n            {\r\n                hserver.SetUpGetExpectation(\"http://localhost:50000/user/23\")\r\n                    .ExpectedNumberOfCalls(1)                    \r\n                    .Validator(\r\n                        req =>\r\n                        {\r\n                            return req.RequestUri.PathAndQuery == \"/user/23\";\r\n                        })\r\n                    .Response(HttpStatusCode.OK, HttpRequestContentType.Json, new ResponseTestClass { Name = \"response\", IsOld = true, Age = 12 });\r\n\r\n                var restClient = new RestClient(this.serverBaseUrl);\r\n                var request = new RestRequest(\"/user/23\");\r\n                request.AddJsonBody(new { Name = \"test\", Id = 23 });\r\n                request.AddHeader(\"test\", \"test1\");\r\n                request.Method = Method.GET;\r\n\r\n                var response = restClient.Execute<ResponseTestClass>(request);\r\n                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, \"The respond status code is not the expected.\");\r\n                Assert.IsNotNull(response.Data, \"The response is empty.\");                \r\n                Assert.AreEqual(\"response\", response.Data.Name, \"The response data is not the expected.\");\r\n                Assert.IsTrue(response.Data.IsOld, \"The response data is not the expected.\");\r\n                Assert.AreEqual(12, response.Data.Age, \"The response data is not the expected.\");\r\n\r\n                hserver.VerifyAllRequestExpectationsAndUnexpectedRequests();\r\n            }\r\n\r\n### Setting up a number of request repetitions\r\n    using (var hserver = new HttpServerMock(TestServerPort))\r\n            {\r\n                hserver.SetUpPostExpectation(\"http://localhost:50000/user/23\")\r\n                    .ExpectedNumberOfCalls(2)\r\n                    .Response(HttpStatusCode.OK);\r\n\r\n                var restClient = new RestClient(this.serverBaseUrl);\r\n                var request = new RestRequest(\"/user/23\") { Method = Method.POST };\r\n\r\n                var response = restClient.Execute(request);\r\n                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, \"The respond status code is not the expected.\");\r\n\r\n                response = restClient.Execute(request);\r\n                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, \"The respond status code is not the expected.\");\r\n\r\n                response = restClient.Execute(request);\r\n                Assert.AreEqual(HttpStatusCode.NotImplemented, response.StatusCode, \"The respond status code is not the expected.\");\r\n\r\n                hserver.VerifyAllRequestExpectationsAndUnexpectedRequests();\r\n            }\r\n\r\n### Http request header validation\r\n    using (var hserver = new HttpServerMock(TestServerPort))\r\n            {\r\n                hserver.SetUpPostExpectation(\"http://localhost:50000/user/23\")\r\n                    .ExpectedRequestHeaders(new Dictionary<string, string> { { \"test\", \"value\" } })\r\n                    .Response(HttpStatusCode.OK);\r\n\r\n                var restClient = new RestClient(this.serverBaseUrl);\r\n                var request = new RestRequest(\"/user/23\");\r\n                request.AddHeader(\"test\", \"value\");\r\n                request.Method = Method.POST;\r\n\r\n                var response = restClient.Execute(request);\r\n                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, \"The respond status code is not the expected.\");\r\n            }\r\n\r\n### Using plain Json to validate the request content\r\n    using (var hserver = new HttpServerMock(TestServerPort))\r\n            {\r\n                hserver.SetUpPostExpectation(\"http://localhost:50000/user/23\")\r\n                    .ExpectedContent(\"{\\\"Name\\\":\\\"test\\\", \\\"IsOld\\\":true, \\\"Id\\\":23}\", HttpRequestContentType.Json)\r\n                    .Response(HttpStatusCode.OK);\r\n\r\n                var restClient = new RestClient(this.serverBaseUrl);\r\n                var request = new RestRequest(\"/user/23\");\r\n                request.AddJsonBody(new { Name = \"test\", Id = 23, IsOld = true });\r\n                request.Method = Method.POST;\r\n\r\n                var response = restClient.Execute(request);\r\n                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, \"The respond status code is not the expected.\");\r\n                Assert.IsNull(response.ErrorException, \"The request contains an exception.\");\r\n            }\r\n\r\n### using plain XML to validate the request content\r\n    using (var hserver = new HttpServerMock(TestServerPort))\r\n            {\r\n                hserver.SetUpPostExpectation(\"user/23\")\r\n                    .ExpectedContent(\"<User><Name>test</Name><IsOld>true</IsOld><Age>23</Age></User>\", HttpRequestContentType.Xml)\r\n                    .Response(HttpStatusCode.OK, HttpRequestContentType.Xml, new { Name = \"testres\", Age = 25, IsOld = false });\r\n\r\n                var restClient = new RestClient(this.serverBaseUrl);\r\n                var request = new RestRequest(\"/user/23\");\r\n                request.AddXmlBody(new ResponseTestClass() { Name = \"test\", Age = 23, IsOld = true });\r\n                request.Method = Method.POST;\r\n\r\n                var response = restClient.Execute<ResponseTestClass>(request);\r\n                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, \"The respond status code is not the expected.\");\r\n                Assert.IsNull(response.ErrorException, \"The request contains an exception.\");\r\n                Assert.AreEqual(\"testres\", response.Data.Name, \"The data returned by the server is not the expected.\");\r\n                Assert.AreEqual(false, response.Data.IsOld, \"The data returned by the server is not the expected.\");\r\n                Assert.AreEqual(25, response.Data.Age, \"The data returned by the server is not the expected.\");\r\n            }\r\n\r\n### using dynamics to validate the XML request content\r\n    using (var hserver = new HttpServerMock(TestServerPort))\r\n            {\r\n                hserver.SetUpPostExpectation(\"user/23\")\r\n                    .ExpectedContent(new { Name = \"test\", IsOld = true, Age = 23 }, HttpRequestContentType.Xml)\r\n                    .Response(HttpStatusCode.OK, HttpRequestContentType.Xml, new { Name = \"testres\", Age = 25, IsOld = false });\r\n\r\n                var restClient = new RestClient(this.serverBaseUrl);\r\n                var request = new RestRequest(\"/user/23\");\r\n                request.AddXmlBody(new ResponseTestClass() { Name = \"test\", Age = 23, IsOld = true });\r\n                request.Method = Method.POST;\r\n\r\n                var response = restClient.Execute<ResponseTestClass>(request);\r\n                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, \"The respond status code is not the expected.\");\r\n                Assert.IsNull(response.ErrorException, \"The request contains an exception.\");\r\n                Assert.AreEqual(\"testres\", response.Data.Name, \"The data returned by the server is not the expected.\");\r\n                Assert.AreEqual(false, response.Data.IsOld, \"The data returned by the server is not the expected.\");\r\n                Assert.AreEqual(25, response.Data.Age, \"The data returned by the server is not the expected.\");\r\n            }\r\n\r\n### Using regular expressions for URL validation\r\n    using (var hserver = new HttpServerMock(TestServerPort))\r\n            {\r\n                hserver.SetUpGetExpectation(\"user/[0-9]{2}\")\r\n                    .Response(HttpStatusCode.OK);\r\n\r\n                var restClient = new RestClient(this.serverBaseUrl);\r\n                var request = new RestRequest(\"/user/23/data\") { Method = Method.GET };\r\n\r\n                var response = restClient.Execute(request);\r\n                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, \"The respond status code is not the expected.\");\r\n                Assert.IsNull(response.ErrorException, \"The request contains an exception.\");\r\n            }\r\n\r\n### Adding special HTTP headers to the responses\r\n    using (var hserver = new HttpServerMock(TestServerPort))\r\n            {\r\n                hserver.SetUpGetExpectation(\"http://localhost:50000/user/23\")\r\n                    .Response(HttpStatusCode.OK)\r\n                    .ResponseHeader(\"Content-Type\", \"application/text\");\r\n\r\n                var restClient = new RestClient(this.serverBaseUrl);\r\n                var request = new RestRequest(\"/user/23\");\r\n                request.Method = Method.GET;\r\n\r\n                var response = restClient.Execute(request);\r\n                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, \"The respond status code is not the expected.\");\r\n                Assert.IsNull(response.ErrorException, \"The request contains an exception.\");\r\n                Assert.IsTrue(response.Headers.Any(h => h.Name == \"Content-Type\" && h.Value.ToString() == \"application/text\"), \"The response does not contains the header.\");\r\n            }","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}